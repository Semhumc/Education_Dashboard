// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package tutorial

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAttendance = `-- name: CreateAttendance :one
INSERT INTO attendances (student_id, schedule_id, here, counter)
VALUES ($1, $2, $3, $4)
RETURNING id, student_id, schedule_id, here, counter
`

type CreateAttendanceParams struct {
	StudentID  pgtype.UUID
	ScheduleID pgtype.UUID
	Here       bool
	Counter    int32
}

func (q *Queries) CreateAttendance(ctx context.Context, arg CreateAttendanceParams) (Attendance, error) {
	row := q.db.QueryRow(ctx, createAttendance,
		arg.StudentID,
		arg.ScheduleID,
		arg.Here,
		arg.Counter,
	)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.ScheduleID,
		&i.Here,
		&i.Counter,
	)
	return i, err
}

const createHomework = `-- name: CreateHomework :one
INSERT INTO homeworks (teacher_id, lesson_id, class_id, title, content, due_date)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, teacher_id, lesson_id, class_id, title, content, due_date
`

type CreateHomeworkParams struct {
	TeacherID pgtype.UUID
	LessonID  pgtype.UUID
	ClassID   pgtype.UUID
	Title     string
	Content   pgtype.Text
	DueDate   pgtype.Timestamp
}

func (q *Queries) CreateHomework(ctx context.Context, arg CreateHomeworkParams) (Homework, error) {
	row := q.db.QueryRow(ctx, createHomework,
		arg.TeacherID,
		arg.LessonID,
		arg.ClassID,
		arg.Title,
		arg.Content,
		arg.DueDate,
	)
	var i Homework
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.LessonID,
		&i.ClassID,
		&i.Title,
		&i.Content,
		&i.DueDate,
	)
	return i, err
}

const createLesson = `-- name: CreateLesson :one
INSERT INTO lessons (lesson_name)
VALUES ($1)
RETURNING id, lesson_name
`

func (q *Queries) CreateLesson(ctx context.Context, lessonName string) (Lesson, error) {
	row := q.db.QueryRow(ctx, createLesson, lessonName)
	var i Lesson
	err := row.Scan(&i.ID, &i.LessonName)
	return i, err
}

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (date, time, teacher_id, lesson_id, class_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, date, time, teacher_id, lesson_id, class_id
`

type CreateScheduleParams struct {
	Date      pgtype.Date
	Time      pgtype.Time
	TeacherID pgtype.UUID
	LessonID  pgtype.UUID
	ClassID   pgtype.UUID
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRow(ctx, createSchedule,
		arg.Date,
		arg.Time,
		arg.TeacherID,
		arg.LessonID,
		arg.ClassID,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Time,
		&i.TeacherID,
		&i.LessonID,
		&i.ClassID,
	)
	return i, err
}

const deleteAttendance = `-- name: DeleteAttendance :exec
DELETE FROM attendances WHERE id = $1
`

func (q *Queries) DeleteAttendance(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAttendance, id)
	return err
}

const deleteHomework = `-- name: DeleteHomework :exec
DELETE FROM homeworks WHERE id = $1
`

func (q *Queries) DeleteHomework(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteHomework, id)
	return err
}

const deleteLesson = `-- name: DeleteLesson :exec
DELETE FROM lessons WHERE id = $1
`

func (q *Queries) DeleteLesson(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteLesson, id)
	return err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM schedules WHERE id = $1
`

func (q *Queries) DeleteSchedule(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSchedule, id)
	return err
}

const getAllHomeworks = `-- name: GetAllHomeworks :many
SELECT id, teacher_id, lesson_id, class_id, title, content, due_date FROM homeworks
`

func (q *Queries) GetAllHomeworks(ctx context.Context) ([]Homework, error) {
	rows, err := q.db.Query(ctx, getAllHomeworks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Homework
	for rows.Next() {
		var i Homework
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.LessonID,
			&i.ClassID,
			&i.Title,
			&i.Content,
			&i.DueDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLessons = `-- name: GetAllLessons :many
SELECT id, lesson_name FROM lessons
`

func (q *Queries) GetAllLessons(ctx context.Context) ([]Lesson, error) {
	rows, err := q.db.Query(ctx, getAllLessons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lesson
	for rows.Next() {
		var i Lesson
		if err := rows.Scan(&i.ID, &i.LessonName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSchedules = `-- name: GetAllSchedules :many
SELECT id, date, time, teacher_id, lesson_id, class_id FROM schedules
`

func (q *Queries) GetAllSchedules(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.Query(ctx, getAllSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Time,
			&i.TeacherID,
			&i.LessonID,
			&i.ClassID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttendanceByID = `-- name: GetAttendanceByID :one
SELECT id, student_id, schedule_id, here, counter FROM attendances WHERE id = $1
`

func (q *Queries) GetAttendanceByID(ctx context.Context, id pgtype.UUID) (Attendance, error) {
	row := q.db.QueryRow(ctx, getAttendanceByID, id)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.ScheduleID,
		&i.Here,
		&i.Counter,
	)
	return i, err
}

const getAttendanceByScheduleID = `-- name: GetAttendanceByScheduleID :many
SELECT id, student_id, schedule_id, here, counter FROM attendances WHERE schedule_id = $1
`

func (q *Queries) GetAttendanceByScheduleID(ctx context.Context, scheduleID pgtype.UUID) ([]Attendance, error) {
	rows, err := q.db.Query(ctx, getAttendanceByScheduleID, scheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attendance
	for rows.Next() {
		var i Attendance
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.ScheduleID,
			&i.Here,
			&i.Counter,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttendanceByStudentID = `-- name: GetAttendanceByStudentID :many
SELECT id, student_id, schedule_id, here, counter FROM attendances WHERE student_id = $1
`

func (q *Queries) GetAttendanceByStudentID(ctx context.Context, studentID pgtype.UUID) ([]Attendance, error) {
	rows, err := q.db.Query(ctx, getAttendanceByStudentID, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attendance
	for rows.Next() {
		var i Attendance
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.ScheduleID,
			&i.Here,
			&i.Counter,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHomeworkByID = `-- name: GetHomeworkByID :one
SELECT id, teacher_id, lesson_id, class_id, title, content, due_date FROM homeworks WHERE id = $1
`

func (q *Queries) GetHomeworkByID(ctx context.Context, id pgtype.UUID) (Homework, error) {
	row := q.db.QueryRow(ctx, getHomeworkByID, id)
	var i Homework
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.LessonID,
		&i.ClassID,
		&i.Title,
		&i.Content,
		&i.DueDate,
	)
	return i, err
}

const getHomeworksByClassID = `-- name: GetHomeworksByClassID :many
SELECT id, teacher_id, lesson_id, class_id, title, content, due_date FROM homeworks WHERE class_id = $1
`

func (q *Queries) GetHomeworksByClassID(ctx context.Context, classID pgtype.UUID) ([]Homework, error) {
	rows, err := q.db.Query(ctx, getHomeworksByClassID, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Homework
	for rows.Next() {
		var i Homework
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.LessonID,
			&i.ClassID,
			&i.Title,
			&i.Content,
			&i.DueDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHomeworksByLessonID = `-- name: GetHomeworksByLessonID :many
SELECT id, teacher_id, lesson_id, class_id, title, content, due_date FROM homeworks WHERE lesson_id = $1
`

func (q *Queries) GetHomeworksByLessonID(ctx context.Context, lessonID pgtype.UUID) ([]Homework, error) {
	rows, err := q.db.Query(ctx, getHomeworksByLessonID, lessonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Homework
	for rows.Next() {
		var i Homework
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.LessonID,
			&i.ClassID,
			&i.Title,
			&i.Content,
			&i.DueDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHomeworksByTeacherID = `-- name: GetHomeworksByTeacherID :many
SELECT id, teacher_id, lesson_id, class_id, title, content, due_date FROM homeworks WHERE teacher_id = $1
`

func (q *Queries) GetHomeworksByTeacherID(ctx context.Context, teacherID pgtype.UUID) ([]Homework, error) {
	rows, err := q.db.Query(ctx, getHomeworksByTeacherID, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Homework
	for rows.Next() {
		var i Homework
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.LessonID,
			&i.ClassID,
			&i.Title,
			&i.Content,
			&i.DueDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLessonByID = `-- name: GetLessonByID :one
SELECT id, lesson_name FROM lessons WHERE id = $1
`

func (q *Queries) GetLessonByID(ctx context.Context, id pgtype.UUID) (Lesson, error) {
	row := q.db.QueryRow(ctx, getLessonByID, id)
	var i Lesson
	err := row.Scan(&i.ID, &i.LessonName)
	return i, err
}

const getScheduleByID = `-- name: GetScheduleByID :one
SELECT id, date, time, teacher_id, lesson_id, class_id FROM schedules WHERE id = $1
`

func (q *Queries) GetScheduleByID(ctx context.Context, id pgtype.UUID) (Schedule, error) {
	row := q.db.QueryRow(ctx, getScheduleByID, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Time,
		&i.TeacherID,
		&i.LessonID,
		&i.ClassID,
	)
	return i, err
}

const getSchedulesByClassID = `-- name: GetSchedulesByClassID :many
SELECT id, date, time, teacher_id, lesson_id, class_id FROM schedules WHERE class_id = $1
`

func (q *Queries) GetSchedulesByClassID(ctx context.Context, classID pgtype.UUID) ([]Schedule, error) {
	rows, err := q.db.Query(ctx, getSchedulesByClassID, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Time,
			&i.TeacherID,
			&i.LessonID,
			&i.ClassID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchedulesByTeacherID = `-- name: GetSchedulesByTeacherID :many
SELECT id, date, time, teacher_id, lesson_id, class_id FROM schedules WHERE teacher_id = $1
`

func (q *Queries) GetSchedulesByTeacherID(ctx context.Context, teacherID pgtype.UUID) ([]Schedule, error) {
	rows, err := q.db.Query(ctx, getSchedulesByTeacherID, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Time,
			&i.TeacherID,
			&i.LessonID,
			&i.ClassID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAttendance = `-- name: UpdateAttendance :one
UPDATE attendances
SET student_id = $2,
    schedule_id = $3,
    here = $4,
    counter = $5
WHERE id = $1
RETURNING id, student_id, schedule_id, here, counter
`

type UpdateAttendanceParams struct {
	ID         pgtype.UUID
	StudentID  pgtype.UUID
	ScheduleID pgtype.UUID
	Here       bool
	Counter    int32
}

func (q *Queries) UpdateAttendance(ctx context.Context, arg UpdateAttendanceParams) (Attendance, error) {
	row := q.db.QueryRow(ctx, updateAttendance,
		arg.ID,
		arg.StudentID,
		arg.ScheduleID,
		arg.Here,
		arg.Counter,
	)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.ScheduleID,
		&i.Here,
		&i.Counter,
	)
	return i, err
}

const updateHomework = `-- name: UpdateHomework :one
UPDATE homeworks
SET teacher_id = $2,
    lesson_id = $3,
    class_id = $4,
    title = $5,
    content = $6,
    due_date = $7
WHERE id = $1
RETURNING id, teacher_id, lesson_id, class_id, title, content, due_date
`

type UpdateHomeworkParams struct {
	ID        pgtype.UUID
	TeacherID pgtype.UUID
	LessonID  pgtype.UUID
	ClassID   pgtype.UUID
	Title     string
	Content   pgtype.Text
	DueDate   pgtype.Timestamp
}

func (q *Queries) UpdateHomework(ctx context.Context, arg UpdateHomeworkParams) (Homework, error) {
	row := q.db.QueryRow(ctx, updateHomework,
		arg.ID,
		arg.TeacherID,
		arg.LessonID,
		arg.ClassID,
		arg.Title,
		arg.Content,
		arg.DueDate,
	)
	var i Homework
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.LessonID,
		&i.ClassID,
		&i.Title,
		&i.Content,
		&i.DueDate,
	)
	return i, err
}

const updateLesson = `-- name: UpdateLesson :one
UPDATE lessons
SET lesson_name = $2
WHERE id = $1
RETURNING id, lesson_name
`

type UpdateLessonParams struct {
	ID         pgtype.UUID
	LessonName string
}

func (q *Queries) UpdateLesson(ctx context.Context, arg UpdateLessonParams) (Lesson, error) {
	row := q.db.QueryRow(ctx, updateLesson, arg.ID, arg.LessonName)
	var i Lesson
	err := row.Scan(&i.ID, &i.LessonName)
	return i, err
}

const updateSchedule = `-- name: UpdateSchedule :one
UPDATE schedules
SET date = $2,
    time = $3,
    teacher_id = $4,
    lesson_id = $5,
    class_id = $6
WHERE id = $1
RETURNING id, date, time, teacher_id, lesson_id, class_id
`

type UpdateScheduleParams struct {
	ID        pgtype.UUID
	Date      pgtype.Date
	Time      pgtype.Time
	TeacherID pgtype.UUID
	LessonID  pgtype.UUID
	ClassID   pgtype.UUID
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) (Schedule, error) {
	row := q.db.QueryRow(ctx, updateSchedule,
		arg.ID,
		arg.Date,
		arg.Time,
		arg.TeacherID,
		arg.LessonID,
		arg.ClassID,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Time,
		&i.TeacherID,
		&i.LessonID,
		&i.ClassID,
	)
	return i, err
}
